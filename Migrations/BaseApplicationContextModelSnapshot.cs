// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NUNA.Models.BaseApplicationContext;

namespace NUNA.Migrations
{
    [DbContext(typeof(BaseApplicationContext))]
    partial class BaseApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetRoleMenus", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Menu")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("RoleId", "Menu");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleMenus");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetRolePermissions", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Permission")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("RoleId", "Permission");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRolePermissions");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserMenus", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Menu")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("UserId", "Menu");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserMenus");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserPermissions", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Permission")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("UserId", "Permission");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserPermissions");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Controller")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("IconClass")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParent")
                        .HasColumnType("boolean");

                    b.Property<string>("Nama")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("NoUrut")
                        .HasColumnType("integer");

                    b.Property<string>("Parent")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.Personal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("character varying(75)")
                        .HasMaxLength(75);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Nama")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nip")
                        .HasColumnName("NIP")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PersonalCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer");

                    b.Property<int?>("RF_PositionId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Signature")
                        .HasColumnType("bytea");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("RF_PositionId");

                    b.ToTable("Personal");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.RF_Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("RF_Position");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.UserSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Aside")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("character varying(75)")
                        .HasMaxLength(75);

                    b.Property<string>("Theme")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("UserSetting");
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetRoleClaims", b =>
                {
                    b.HasOne("NUNA.Models.BaseApplicationContext.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetRoleMenus", b =>
                {
                    b.HasOne("NUNA.Models.BaseApplicationContext.AspNetRoles", "Role")
                        .WithMany("AspNetRoleMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetRolePermissions", b =>
                {
                    b.HasOne("NUNA.Models.BaseApplicationContext.AspNetRoles", "Role")
                        .WithMany("AspNetRolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserClaims", b =>
                {
                    b.HasOne("NUNA.Models.BaseApplicationContext.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserLogins", b =>
                {
                    b.HasOne("NUNA.Models.BaseApplicationContext.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserMenus", b =>
                {
                    b.HasOne("NUNA.Models.BaseApplicationContext.AspNetUsers", "User")
                        .WithMany("AspNetUserMenus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserPermissions", b =>
                {
                    b.HasOne("NUNA.Models.BaseApplicationContext.AspNetUsers", "User")
                        .WithMany("AspNetUserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserRoles", b =>
                {
                    b.HasOne("NUNA.Models.BaseApplicationContext.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NUNA.Models.BaseApplicationContext.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.AspNetUserTokens", b =>
                {
                    b.HasOne("NUNA.Models.BaseApplicationContext.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUNA.Models.BaseApplicationContext.Personal", b =>
                {
                    b.HasOne("NUNA.Models.BaseApplicationContext.RF_Position", "RF_Position")
                        .WithMany("Personals")
                        .HasForeignKey("RF_PositionId");
                });
#pragma warning restore 612, 618
        }
    }
}
